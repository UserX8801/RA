import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class Form(StatesGroup):
    waiting_for_service = State()
    waiting_for_car = State()
    waiting_for_contact = State()

services = [
    "–•–∏–º—á–∏—Å—Ç–∫–∞", "–ü–æ–ª–∏—Ä–æ–≤–∫–∞\–∫–µ—Ä–∞–º–∏–∫–∞", "–ë—Ä–æ–Ω–µ–ø–ª–µ–Ω–∫–∞", "–¢–æ–Ω–∏—Ä–æ–≤–∫–∞",
    "–£–¥–∞–ª–µ–Ω–∏–µ –≤–º—è—Ç–∏–Ω", "–†–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è –∫–æ–∂–∏", "–¶–≤–µ—Ç–Ω–∞—è –ø–ª–µ–Ω–∫–∞", "–ë—Ä–æ–Ω—å –ª–æ–±–æ–≤–æ–≥–æ",
    "–®–ª–∏—Ñ–æ–≤–∫–∞ —Ñ–∞—Ä", "–ü–æ–∫—Ä–∞—Å–∫–∞ –¥–∏—Å–∫–æ–≤", "–ó–∞—â–∏—Ç–∞ —Å–∞–ª–æ–Ω–∞", "–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å" 
]
service_keyboard = InlineKeyboardMarkup(row_width=2)
for s in services:
    service_keyboard.insert(InlineKeyboardButton(s, callback_data=s))

@dp.message_handler(commands="start")
async def start_handler(message: types.Message):
    welcome_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ R&A Detailing Studio.\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –¥–µ—Ç–µ–π–ª–∏–Ω–≥-—É—Å–ª—É–≥ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å."
    )
    await message.answer(welcome_text, reply_markup=service_keyboard)
    await Form.waiting_for_service.set()

@dp.callback_query_handler(state=Form.waiting_for_service)
async def service_chosen(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(service=call.data)
    await call.message.edit_reply_markup()
    await call.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await Form.waiting_for_car.set()

@dp.message_handler(state=Form.waiting_for_car)
async def car_received(message: types.Message, state: FSMContext):
    await state.update_data(car=message.text)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω, +7 999 123 45 67"
    )
    await Form.waiting_for_contact.set()

@dp.message_handler(state=Form.waiting_for_contact)
async def contact_received(message: types.Message, state: FSMContext):
    contact_text = message.text.strip()
    if ',' in contact_text:
        name, phone = map(str.strip, contact_text.split(',', 1))
    else:
        parts = contact_text.split(maxsplit=1)
        if len(parts) == 2:
            name, phone = parts
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –ø—Ä–æ–±–µ–ª–æ–º.")
            return

    await state.update_data(name=name, phone=phone)
    data = await state.get_data()
    await state.finish()

    text = (
        "üì© *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–µ—Ç–µ–π–ª–∏–Ω–≥*\n\n"
        f"üõ† –£—Å–ª—É–≥–∞: {data['service']}\n"
        f"üöó –ê–≤—Ç–æ: {data['car']}\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}"
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

    try:
        await bot.send_message(ADMIN_ID, text, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)